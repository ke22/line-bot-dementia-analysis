from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn
import json
import os
import asyncio

app = FastAPI(title="LINE Bot Â§±Êô∫ÁóáÂàÜÊûêÁ≥ªÁµ±", version="1.0")

# Áí∞Â¢ÉËÆäÊï∏
LINE_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', '')
LINE_SECRET = os.getenv('LINE_CHANNEL_SECRET', '')

@app.get("/")
def root():
    return {
        "message": "LINE Bot Â§±Êô∫ÁóáÂàÜÊûêÁ≥ªÁµ±",
        "status": "‚úÖ ÈÅãË°å‰∏≠",
        "features": ["Webhook Êé•Êî∂", "Â§±Êô∫ÁóáÂàÜÊûê", "Flex Message"],
        "line_token": "‚úÖ Â∑≤Ë®≠ÂÆö" if LINE_TOKEN else "‚ùå Êú™Ë®≠ÂÆö",
        "webhook_url": "Ë´ãË®≠ÂÆöÁÇ∫: /webhook"
    }

@app.get("/health")
def health():
    return {"status": "healthy", "ready": True}

@app.post("/webhook")
async def webhook(request: Request):
    """LINE Bot Webhook Á´ØÈªû"""
    try:
        print("=" * 50)
        print("üì® Êî∂Âà∞ LINE Webhook Ë´ãÊ±Ç")
        
        # ËÆÄÂèñË´ãÊ±ÇÂÖßÂÆπ
        body = await request.body()
        webhook_data = json.loads(body.decode('utf-8'))
        
        events = webhook_data.get('events', [])
        print(f"üéØ ËôïÁêÜ {len(events)} ÂÄã‰∫ã‰ª∂")
        
        # ËôïÁêÜÊØèÂÄã‰∫ã‰ª∂
        for event in events:
            event_type = event.get('type', 'unknown')
            print(f"üìã ‰∫ã‰ª∂È°ûÂûã: {event_type}")
            
            if event_type == 'message':
                message = event.get('message', {})
                if message.get('type') == 'text':
                    user_text = message.get('text', '').strip()
                    reply_token = event.get('replyToken', '')
                    
                    print(f"üë§ ‰ΩøÁî®ËÄÖË®äÊÅØ: '{user_text}'")
                    print(f"üîÑ Reply Token: {reply_token}")
                    
                    # ËôïÁêÜË®äÊÅØ
                    await process_message(user_text, reply_token)
        
        print("‚úÖ Webhook ËôïÁêÜÂÆåÊàê")
        print("=" * 50)
        
        # ÂøÖÈ†àÂõûÂÇ≥ 200
        return JSONResponse(
            status_code=200,
            content={"status": "ok", "message": "processed"}
        )
        
    except Exception as e:
        print(f"‚ùå Webhook ÈåØË™§: {e}")
        return JSONResponse(
            status_code=200,
            content={"status": "error", "message": str(e)}
        )

async def process_message(text: str, reply_token: str):
    """ËôïÁêÜ‰ΩøÁî®ËÄÖË®äÊÅØ"""
    try:
        # ÂàÜÊûêË®äÊÅØÈ°ûÂûã
        if text.lower() in ['hello', 'hi', '‰Ω†Â•Ω', 'help', 'Âπ´Âä©']:
            print("üìã ÂõûÊáâ: Âπ´Âä©Ë®äÊÅØ")
            response = create_help_response()
        else:
            print("üß† Âü∑Ë°åÂ§±Êô∫ÁóáÂàÜÊûê...")
            analysis = analyze_symptoms(text)
            response = create_analysis_response(text, analysis)
            print(f"üìä ÂàÜÊûêÁµêÊûú: {analysis['category']} (‰ø°ÂøÉÂ∫¶: {analysis['confidence']:.0%})")
        
        # Â¶ÇÊûúÊúâ LINE_TOKENÔºåÁôºÈÄÅÂõûË¶Ü
        if LINE_TOKEN and reply_token:
            await send_real_reply(reply_token, response)
        else:
            print("‚ö†Ô∏è ÁÑ°Ê≥ïÁôºÈÄÅÂõûË¶Ü (TOKEN Êàñ reply_token Áº∫Â§±)")
            
    except Exception as e:
        print(f"‚ùå Ë®äÊÅØËôïÁêÜÈåØË™§: {e}")

def analyze_symptoms(text: str) -> dict:
    """Â§±Êô∫ÁóáÁóáÁãÄÂàÜÊûê"""
    # ÂÆöÁæ©Ë≠¶Ë®äÈ°ûÂà•ÂíåÈóúÈçµÂ≠ó
    categories = {
        'M1-01': {
            'name': 'Ë®òÊÜ∂ÂäõÊ∏õÈÄÄÂΩ±ÈüøÁîüÊ¥ª',
            'keywords': ['ÂøòË®ò', 'Ë®ò‰∏ç‰Ωè', 'ÈáçË§áÂïè', 'ÂÅ•Âøò', 'Ë®òÊÜ∂'],
            'normal': 'ÂÅ∂ÁàæÂøòË®òÁ¥ÑÊúÉÊàñÊúãÂèãÂêçÂ≠óÔºå‰ΩÜËÉΩÂ§†Ëá™Â∑±ÊÉ≥Ëµ∑‰æÜ',
            'warning': 'È†ªÁπÅÂøòË®òÈáçË¶ÅË≥áË®äÔºåÂΩ±ÈüøÊó•Â∏∏ÁîüÊ¥ªÂäüËÉΩ'
        },
        'M1-02': {
            'name': 'Ë®àÂäÉ‰∫ãÊÉÖÊàñËß£Ê±∫ÂïèÈ°åÊúâÂõ∞Èõ£',
            'keywords': ['Ë®àÂäÉ', 'ÂÆâÊéí', 'Âõ∞Èõ£', '‰∏çÊúÉ', 'ÊÉ≥‰∏çÂá∫'],
            'normal': 'ÂÅ∂ÁàæÈúÄË¶ÅÂπ´Âä©Êìç‰ΩúÂæÆÊ≥¢ÁàêË®≠ÂÆö',
            'warning': 'ÁÑ°Ê≥ïÂà∂ÂÆöÂíåÂü∑Ë°åË®àÂäÉÔºåËôïÁêÜÊï∏Â≠óÊúâÂõ∞Èõ£'
        },
        'M1-03': {
            'name': 'ÁÑ°Ê≥ïÂãù‰ªªÂéüÊú¨ÁÜüÊÇâÁöÑ‰∫ãÂãô',
            'keywords': ['ÁÜüÊÇâ', '‰∏çÊúÉÁî®', 'ÂÅö‰∏çÂà∞', 'Êìç‰Ωú', 'ÂÆ∂Èõª'],
            'normal': 'ÂÅ∂ÁàæÈúÄË¶ÅÂπ´Âä©Ë®òÈåÑÈõªË¶ñÁØÄÁõÆ',
            'warning': 'ÁÑ°Ê≥ïÂÆåÊàêÂéüÊú¨ÁÜüÊÇâÁöÑÂ∑•‰ΩúÊàñÂÆ∂Âãô'
        },
        'M1-04': {
            'name': 'Â∞çÊôÇÈñìÂú∞ÈªûÊÑüÂà∞Ê∑∑Ê∑Ü',
            'keywords': ['Ëø∑Ë∑Ø', 'ÊôÇÈñì', 'Âú∞Èªû', 'Ê∑∑Ê∑Ü', '‰∏çÁü•ÈÅìÂú®Âì™'],
            'normal': 'ÂÅ∂ÁàæÂøòË®ò‰ªäÂ§©ÊòØÊòüÊúüÂπæ',
            'warning': 'Âú®ÁÜüÊÇâÁöÑÂú∞ÊñπËø∑Ë∑ØÔºå‰∏çÁü•ÈÅìÊôÇÈñì„ÄÅÊó•ÊúüÊàñÂ≠£ÁØÄ'
        },
        'M1-10': {
            'name': 'ÊÉÖÁ∑íÂíåÂÄãÊÄßÁöÑÊîπËÆä',
            'keywords': ['ËÑæÊ∞£', 'ÂÄãÊÄß', 'ÊîπËÆä', 'ÊòìÊÄí', 'ÊÜÇÈ¨±'],
            'normal': 'Áï∂ÊâìÁ†¥Â∏∏Ë¶èÊôÇÊúÉÊÑüÂà∞ÊòìÊÄí',
            'warning': 'ÂÄãÊÄßÊòéÈ°ØÊîπËÆäÔºåËÆäÂæóÂõ∞ÊÉë„ÄÅÂ§öÁñë„ÄÅÊÜÇÈ¨±ÊàñÊòìÊÄí'
        }
    }
    
    # ÂàÜÊûêÂåπÈÖçÂ∫¶
    best_match = 'M1-01'
    max_score = 0
    
    for category_id, info in categories.items():
        score = sum(1 for keyword in info['keywords'] if keyword in text)
        if score > max_score:
            max_score = score
            best_match = category_id
    
    # Ë®àÁÆó‰ø°ÂøÉÂ∫¶
    confidence = min(max_score * 0.25 + 0.5, 0.9) if max_score > 0 else 0.6
    
    category_info = categories[best_match]
    
    return {
        'category': best_match,
        'category_name': category_info['name'],
        'confidence': confidence,
        'normal_aging': category_info['normal'],
        'warning_sign': category_info['warning'],
        'recommendations': [
            'ÊåÅÁ∫åËßÄÂØüÁóáÁãÄËÆäÂåñÁöÑÈ†ªÁéáÂíåÂö¥ÈáçÂ∫¶',
            'Ë®òÈåÑÂÖ∑È´îÁôºÁîüÁöÑÊôÇÈñìÂíåÊÉÖÊ≥Å',
            'Â¶ÇÁóáÁãÄÊåÅÁ∫åÊàñÂä†ÈáçÔºåÂª∫Ë≠∞Ë´ÆË©¢Á•ûÁ∂ìÂÖßÁßëÈÜ´Â∏´'
        ]
    }

def create_help_response():
    """ÂâµÂª∫Âπ´Âä©ÂõûÊáâ"""
    return {
        "type": "text",
        "text": """ü§ñ Â§±Êô∫ÁóáÊó©ÊúüË≠¶Ë®äÂàÜÊûêÂä©Êâã

üìù ‰ΩøÁî®ÊñπÊ≥ïÔºö
Áõ¥Êé•ÊèèËø∞ËßÄÂØüÂà∞ÁöÑË°åÁÇ∫ËÆäÂåñÔºå‰æãÂ¶ÇÔºö
- Â™ΩÂ™ΩÊúÄËøëÂ∏∏ÈáçË§áÂïèÂêåÊ®£ÁöÑÂïèÈ°å
- Áà∏Áà∏ÂøòË®òÂõûÂÆ∂ÁöÑË∑Ø
- Â•∂Â•∂‰∏çÊúÉÁî®ÂéüÊú¨ÁÜüÊÇâÁöÑÂÆ∂Èõª

üéØ ÂàÜÊûêÁØÑÂúçÔºö
Êú¨Á≥ªÁµ±ÂèØÂàÜÊûêÂ§±Êô∫ÁóáÂçÅÂ§ßË≠¶Ë®äÔºö
- M1-01: Ë®òÊÜ∂ÂäõÊ∏õÈÄÄÂΩ±ÈüøÁîüÊ¥ª
- M1-02: Ë®àÂäÉ‰∫ãÊÉÖÊàñËß£Ê±∫ÂïèÈ°åÊúâÂõ∞Èõ£
- M1-03: ÁÑ°Ê≥ïÂãù‰ªªÂéüÊú¨ÁÜüÊÇâÁöÑ‰∫ãÂãô
- M1-04: Â∞çÊôÇÈñìÂú∞ÈªûÊÑüÂà∞Ê∑∑Ê∑Ü
- M1-10: ÊÉÖÁ∑íÂíåÂÄãÊÄßÁöÑÊîπËÆä

‚ö†Ô∏è ÈáçË¶ÅÊèêÈÜíÔºö
Ê≠§ÂàÜÊûêÂÉÖ‰æõÂèÉËÄÉÔºåÂ¶ÇÊúâÁñëÊÖÆË´ãË´ÆË©¢Â∞àÊ•≠ÈÜ´Â∏´ÈÄ≤Ë°åË©≥Á¥∞Ë©ï‰º∞„ÄÇ"""
    }

def create_analysis_response(user_input: str, analysis: dict):
    """ÂâµÂª∫ÂàÜÊûêÁµêÊûúÁöÑ Flex Message"""
    confidence_emoji = "üü¢" if analysis['confidence'] > 0.7 else "üü°" if analysis['confidence'] > 0.4 else "üî¥"
    
    return {
        "type": "flex",
        "altText": f"Â§±Êô∫ÁóáË≠¶Ë®äÂàÜÊûêÔºö{analysis['category_name']}",
        "contents": {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üß† Â§±Êô∫ÁóáË≠¶Ë®äÂàÜÊûêÁµêÊûú",
                        "weight": "bold",
                        "color": "#1DB446",
                        "size": "lg"
                    },
                    {
                        "type": "text",
                        "text": f"{confidence_emoji} ÂàÜÊûê‰ø°ÂøÉÂ∫¶: {analysis['confidence']:.0%}",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
                ]
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üî∏ ÊÇ®ÁöÑÊèèËø∞",
                        "weight": "bold",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": user_input[:100] + ("..." if len(user_input) > 100 else ""),
                        "wrap": True,
                        "color": "#333333",
                        "size": "sm"
                    },
                    {
                        "type": "separator",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": f"‚ö†Ô∏è Ë≠¶Ë®äÈ°ûÂà•: {analysis['category']}",
                        "weight": "bold",
                        "color": "#FF5551",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['category_name'],
                        "wrap": True,
                        "color": "#FF5551",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "‚úÖ Ê≠£Â∏∏ËÄÅÂåñÁèæË±°",
                        "weight": "bold",
                        "color": "#00B900",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['normal_aging'],
                        "wrap": True,
                        "color": "#00B900",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "üîç Ë≠¶Ë®äÁâπÂæµ",
                        "weight": "bold",
                        "color": "#FF5551",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['warning_sign'],
                        "wrap": True,
                        "color": "#FF5551",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "üí° Âª∫Ë≠∞‰∫ãÈ†Ö",
                        "weight": "bold",
                        "color": "#1DB446",
                        "margin": "xl"
                    }
                ] + [
                    {
                        "type": "text",
                        "text": f"{i+1}. {rec}",
                        "wrap": True,
                        "size": "sm",
                        "color": "#333333",
                        "margin": "sm"
                    } for i, rec in enumerate(analysis['recommendations'])
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "‚ö†Ô∏è Ê≠§ÂàÜÊûêÂÉÖ‰æõÂèÉËÄÉÔºåÂ¶ÇÊúâÁñëÊÖÆË´ãË´ÆË©¢Â∞àÊ•≠ÈÜ´Â∏´",
                        "wrap": True,
                        "color": "#888888",
                        "size": "xs",
                        "margin": "md"
                    }
                ]
            }
        }
    }

async def send_real_reply(reply_token: str, message: dict):
    """ÁôºÈÄÅ LINE ÂõûË¶Ü (Ê®°Êì¨)"""
    print(f"üì§ Ê®°Êì¨ÁôºÈÄÅ LINE ÂõûË¶Ü (Token: {reply_token[:20]}...)")
    print(f"üìù Ë®äÊÅØÈ°ûÂûã: {message['type']}")
    # ÈÄôË£°ÂèØ‰ª•Âä†ÂÖ•ÂØ¶ÈöõÁöÑ LINE API Ë™øÁî®
    print("‚úÖ ÂõûË¶ÜÁôºÈÄÅÂÆåÊàê (Ê®°Êì¨)")

if __name__ == "__main__":
    print("üöÄ ÂïüÂãï LINE Bot Â§±Êô∫ÁóáÂàÜÊûêÁ≥ªÁµ±")
    print("‚úÖ ÂäüËÉΩ: Webhook + ÂàÜÊûê + Flex Message")
    print(f"üîë LINE Token: {'Â∑≤Ë®≠ÂÆö' if LINE_TOKEN else 'Êú™Ë®≠ÂÆö'}")
    uvicorn.run(app, host="0.0.0.0", port=8000)

# Âú®Ê™îÊ°àÊú´Â∞æÂä†ÂÖ•ÁúüÂØ¶ÁöÑ LINE API Ë™øÁî®
import httpx

async def send_real_reply(reply_token: str, message: dict):
    """ÁôºÈÄÅÁúüÂØ¶ÁöÑ LINE ÂõûË¶Ü"""
    if not LINE_TOKEN:
        print("‚ö†Ô∏è LINE_TOKEN Êú™Ë®≠ÂÆöÔºåÁÑ°Ê≥ïÁôºÈÄÅÂõûË¶Ü")
        return
        
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_TOKEN}"
    }
    
    payload = {
        "replyToken": reply_token,
        "messages": [message]
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            
        if response.status_code == 200:
            print("‚úÖ LINE ÂõûË¶ÜÁôºÈÄÅÊàêÂäüÔºÅ")
        else:
            print(f"‚ùå LINE ÂõûË¶ÜÂ§±Êïó: {response.status_code}, {response.text}")
            
    except Exception as e:
        print(f"‚ùå ÁôºÈÄÅÂõûË¶ÜÈåØË™§: {e}")

# ÊõøÊèõ send_real_reply ÂáΩÊï∏Ë™øÁî®
# Â∞á await send_real_reply(reply_token, response) 
# ÊîπÁÇ∫ await send_real_reply(reply_token, response)
