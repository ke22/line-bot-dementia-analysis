from fastapi import FastAPI, Request
import uvicorn
import json
import os
import httpx
import asyncio

app = FastAPI()

# Áí∞Â¢ÉËÆäÊï∏
LINE_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', '')
LINE_SECRET = os.getenv('LINE_CHANNEL_SECRET', '')
GEMINI_KEY = os.getenv('AISTUDIO_API_KEY', '')

@app.get("/")
def root():
    return {
        "message": "LINE Bot Â§±Êô∫ÁóáÂàÜÊûêÁ≥ªÁµ± - ÂÆåÊï¥Áâà",
        "status": "running",
        "features": ["Êé•Êî∂Ë®äÊÅØ ‚úÖ", "ÂàÜÊûêÂäüËÉΩ ‚úÖ", "Flex Message ‚úÖ", "LINE ÂõûË¶Ü ‚úÖ"],
        "ready_to_reply": bool(LINE_TOKEN),
        "ai_ready": bool(GEMINI_KEY)
    }

@app.get("/health")
def health():
    return {"status": "healthy", "webhook": "connected", "line_api": bool(LINE_TOKEN)}

@app.post("/webhook")
async def webhook(request: Request):
    try:
        body = await request.body()
        webhook_data = json.loads(body.decode('utf-8'))
        
        print(f"üì® Êî∂Âà∞ LINE ‰∫ã‰ª∂: {len(webhook_data.get('events', []))} ÂÄã")
        
        for event in webhook_data.get('events', []):
            if event.get('type') == 'message':
                message = event.get('message', {})
                if message.get('type') == 'text':
                    user_text = message.get('text', '').strip()
                    reply_token = event.get('replyToken')
                    
                    print(f"üë§ ‰ΩøÁî®ËÄÖË®äÊÅØ: {user_text}")
                    print(f"üîÑ Reply Token: {reply_token}")
                    
                    # ÂàÜÊûê‰∏¶ÂõûË¶Ü
                    await process_and_reply(user_text, reply_token)
        
        return {"status": "ok"}
        
    except Exception as e:
        print(f"‚ùå Webhook ÈåØË™§: {e}")
        return {"status": "ok"}

async def process_and_reply(text: str, reply_token: str):
    """ËôïÁêÜË®äÊÅØ‰∏¶ÂõûË¶Ü"""
    try:
        # ÁâπÊÆäÊåá‰ª§ËôïÁêÜ
        if text.lower() in ['hello', 'hi', '‰Ω†Â•Ω', 'help', 'Âπ´Âä©']:
            reply_message = create_help_message()
        else:
            # Â§±Êô∫ÁóáÂàÜÊûê
            analysis = analyze_dementia_symptoms(text)
            reply_message = create_analysis_flex_message(text, analysis)
        
        # ÁôºÈÄÅÂõûË¶Ü
        if LINE_TOKEN:
            await send_line_reply(reply_token, reply_message)
            print("‚úÖ ÂõûË¶ÜÂ∑≤ÁôºÈÄÅ")
        else:
            print("‚ö†Ô∏è LINE_TOKEN Êú™Ë®≠ÂÆöÔºåÁÑ°Ê≥ïÁôºÈÄÅÂõûË¶Ü")
            
    except Exception as e:
        print(f"‚ùå ËôïÁêÜÈåØË™§: {e}")

def analyze_dementia_symptoms(text: str) -> dict:
    """Â§±Êô∫ÁóáÁóáÁãÄÂàÜÊûê"""
    categories = {
        'M1-01': {
            'name': 'Ë®òÊÜ∂ÂäõÊ∏õÈÄÄÂΩ±ÈüøÁîüÊ¥ª',
            'keywords': ['ÂøòË®ò', 'Ë®ò‰∏ç‰Ωè', 'ÈáçË§áÂïè', 'ÂÅ•Âøò', 'Ë®òÊÜ∂'],
            'normal_aging': 'ÂÅ∂ÁàæÂøòË®òÁ¥ÑÊúÉÊàñÊúãÂèãÂêçÂ≠óÔºå‰ΩÜËÉΩÂ§†Ëá™Â∑±ÊÉ≥Ëµ∑‰æÜ',
            'warning': 'È†ªÁπÅÂøòË®òÈáçË¶ÅË≥áË®äÔºåÂΩ±ÈüøÊó•Â∏∏ÁîüÊ¥ªÂäüËÉΩ'
        },
        'M1-02': {
            'name': 'Ë®àÂäÉ‰∫ãÊÉÖÊàñËß£Ê±∫ÂïèÈ°åÊúâÂõ∞Èõ£',
            'keywords': ['Ë®àÂäÉ', 'ÂÆâÊéí', 'Âõ∞Èõ£', '‰∏çÊúÉ', 'ÊÉ≥‰∏çÂá∫'],
            'normal_aging': 'ÂÅ∂ÁàæÈúÄË¶ÅÂπ´Âä©Êìç‰ΩúÂæÆÊ≥¢ÁàêË®≠ÂÆö',
            'warning': 'ÁÑ°Ê≥ïÂà∂ÂÆöÂíåÂü∑Ë°åË®àÂäÉÔºåËôïÁêÜÊï∏Â≠óÊúâÂõ∞Èõ£'
        },
        'M1-03': {
            'name': 'ÁÑ°Ê≥ïÂãù‰ªªÂéüÊú¨ÁÜüÊÇâÁöÑ‰∫ãÂãô',
            'keywords': ['ÁÜüÊÇâ', '‰∏çÊúÉÁî®', 'ÂÅö‰∏çÂà∞', 'Êìç‰Ωú', 'ÂÆ∂Èõª'],
            'normal_aging': 'ÂÅ∂ÁàæÈúÄË¶ÅÂπ´Âä©Ë®òÈåÑÈõªË¶ñÁØÄÁõÆ',
            'warning': 'ÁÑ°Ê≥ïÂÆåÊàêÂéüÊú¨ÁÜüÊÇâÁöÑÂ∑•‰ΩúÊàñÂÆ∂Âãô'
        },
        'M1-04': {
            'name': 'Â∞çÊôÇÈñìÂú∞ÈªûÊÑüÂà∞Ê∑∑Ê∑Ü',
            'keywords': ['Ëø∑Ë∑Ø', 'ÊôÇÈñì', 'Âú∞Èªû', 'Ê∑∑Ê∑Ü', '‰∏çÁü•ÈÅìÂú®Âì™'],
            'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ªäÂ§©ÊòØÊòüÊúüÂπæ',
            'warning': 'Âú®ÁÜüÊÇâÁöÑÂú∞ÊñπËø∑Ë∑ØÔºå‰∏çÁü•ÈÅìÊôÇÈñì„ÄÅÊó•ÊúüÊàñÂ≠£ÁØÄ'
        },
        'M1-08': {
            'name': 'Âà§Êñ∑ÂäõËÆäÂ∑ÆÊàñÊ∏õÂº±',
            'keywords': ['Âà§Êñ∑', 'Ê±∫ÂÆö', 'Â•áÊÄ™', '‰∏çÂêàÁêÜ'],
            'normal_aging': 'ÂÅ∂ÁàæÂÅöÂá∫‰∏çÂ•ΩÁöÑÊ±∫ÂÆö',
            'warning': 'Âà§Êñ∑ÂäõÊòéÈ°ØËÆäÂ∑ÆÔºåÂÆπÊòìÂèóÈ®ôÊàñÂÅöÂá∫‰∏çÁï∂Ê±∫ÂÆö'
        },
        'M1-10': {
            'name': 'ÊÉÖÁ∑íÂíåÂÄãÊÄßÁöÑÊîπËÆä',
            'keywords': ['ËÑæÊ∞£', 'ÂÄãÊÄß', 'ÊîπËÆä', 'ÊòìÊÄí', 'ÊÜÇÈ¨±'],
            'normal_aging': 'Áï∂ÊâìÁ†¥Â∏∏Ë¶èÊôÇÊúÉÊÑüÂà∞ÊòìÊÄí',
            'warning': 'ÂÄãÊÄßÊòéÈ°ØÊîπËÆäÔºåËÆäÂæóÂõ∞ÊÉë„ÄÅÂ§öÁñë„ÄÅÊÜÇÈ¨±ÊàñÊòìÊÄí'
        }
    }
    
    # ÂàÜÊûêÊñáÊú¨ÂåπÈÖçÊúÄ‰Ω≥È°ûÂà•
    best_match = None
    max_score = 0
    
    for category_id, info in categories.items():
        score = sum(1 for keyword in info['keywords'] if keyword in text)
        if score > max_score:
            max_score = score
            best_match = category_id
    
    if not best_match:
        best_match = 'M1-01'  # È†êË®≠ÂàÜÈ°û
        max_score = 0.3
    
    return {
        'category': best_match,
        'category_name': categories[best_match]['name'],
        'confidence': min(max_score * 0.3 + 0.4, 0.9),
        'normal_aging': categories[best_match]['normal_aging'],
        'warning_sign': categories[best_match]['warning'],
        'recommendations': [
            'ÊåÅÁ∫åËßÄÂØüÁóáÁãÄËÆäÂåñÈ†ªÁéá',
            'Ë®òÈåÑÂÖ∑È´îÁôºÁîüÁöÑÊÉÖÊ≥Å',
            'Â¶ÇÁóáÁãÄÊåÅÁ∫åÂª∫Ë≠∞Ë´ÆË©¢ÈÜ´Â∏´'
        ]
    }

def create_help_message():
    """ÂâµÂª∫Âπ´Âä©Ë®äÊÅØ"""
    return {
        "type": "text",
        "text": """ü§ñ Â§±Êô∫ÁóáÊó©ÊúüË≠¶Ë®äÂàÜÊûêÂä©Êâã

üìù ‰ΩøÁî®ÊñπÊ≥ïÔºö
Áõ¥Êé•ÊèèËø∞ËßÄÂØüÂà∞ÁöÑË°åÁÇ∫Ôºå‰æãÂ¶ÇÔºö
- Â™ΩÂ™ΩÊúÄËøëÂ∏∏ÈáçË§áÂïèÂêåÊ®£ÁöÑÂïèÈ°å
- Áà∏Áà∏ÂøòË®òÂõûÂÆ∂ÁöÑË∑Ø
- Â•∂Â•∂‰∏çÊúÉÁî®ÂéüÊú¨ÁÜüÊÇâÁöÑÂÆ∂Èõª

üéØ ÂàÜÊûêÁØÑÂúçÔºö
Êú¨Á≥ªÁµ±ÂèØÂàÜÊûêÂ§±Êô∫ÁóáÂçÅÂ§ßË≠¶Ë®äÔºö
- M1-01: Ë®òÊÜ∂ÂäõÊ∏õÈÄÄÂΩ±ÈüøÁîüÊ¥ª
- M1-02: Ë®àÂäÉ‰∫ãÊÉÖÊàñËß£Ê±∫ÂïèÈ°åÊúâÂõ∞Èõ£
- M1-03: ÁÑ°Ê≥ïÂãù‰ªªÂéüÊú¨ÁÜüÊÇâÁöÑ‰∫ãÂãô
- M1-04: Â∞çÊôÇÈñìÂú∞ÈªûÊÑüÂà∞Ê∑∑Ê∑Ü
- M1-05: Ë¶ñË¶∫ÂΩ±ÂÉèÂíåÁ©∫ÈñìÈóú‰øÇÂïèÈ°å
- M1-06: Ë®ÄË™ûË°®ÈÅîÊàñÊõ∏ÂØ´Âõ∞Èõ£
- M1-07: Áâ©ÂìÅÊì∫ÊîæÈåØ‰∫Ç
- M1-08: Âà§Êñ∑ÂäõËÆäÂ∑ÆÊàñÊ∏õÂº±
- M1-09: ÂæûÂ∑•‰ΩúÊàñÁ§æ‰∫§Ê¥ªÂãï‰∏≠ÈÄÄÂá∫
- M1-10: ÊÉÖÁ∑íÂíåÂÄãÊÄßÁöÑÊîπËÆä

‚ö†Ô∏è ÈáçË¶ÅÊèêÈÜíÔºö
Ê≠§ÂàÜÊûêÂÉÖ‰æõÂèÉËÄÉÔºåÂ¶ÇÊúâÁñëÊÖÆË´ãË´ÆË©¢Â∞àÊ•≠ÈÜ´Â∏´ÈÄ≤Ë°åË©≥Á¥∞Ë©ï‰º∞„ÄÇ"""
    }

def create_analysis_flex_message(user_input: str, analysis: dict):
    """ÂâµÂª∫ÂàÜÊûêÁµêÊûúÁöÑ Flex Message"""
    confidence_emoji = "üü¢" if analysis['confidence'] > 0.7 else "üü°" if analysis['confidence'] > 0.4 else "üî¥"
    
    return {
        "type": "flex",
        "altText": f"Â§±Êô∫ÁóáË≠¶Ë®äÂàÜÊûêÔºö{analysis['category_name']}",
        "contents": {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üß† Â§±Êô∫ÁóáË≠¶Ë®äÂàÜÊûê",
                        "weight": "bold",
                        "color": "#1DB446",
                        "size": "lg"
                    },
                    {
                        "type": "text",
                        "text": f"{confidence_emoji} ‰ø°ÂøÉÂ∫¶: {analysis['confidence']:.0%}",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
                ]
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üî∏ ÊÇ®ÁöÑÊèèËø∞",
                        "weight": "bold",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": user_input[:150] + ("..." if len(user_input) > 150 else ""),
                        "wrap": True,
                        "color": "#333333",
                        "size": "sm"
                    },
                    {
                        "type": "separator",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": f"‚ö†Ô∏è Ë≠¶Ë®äÈ°ûÂà•: {analysis['category']}",
                        "weight": "bold",
                        "color": "#FF5551",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['category_name'],
                        "wrap": True,
                        "color": "#FF5551",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "‚úÖ Ê≠£Â∏∏ËÄÅÂåñÁèæË±°",
                        "weight": "bold",
                        "color": "#00B900",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['normal_aging'],
                        "wrap": True,
                        "color": "#00B900",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "üîç Ë≠¶Ë®äÁâπÂæµ",
                        "weight": "bold",
                        "color": "#FF5551",
                        "margin": "xl"
                    },
                    {
                        "type": "text",
                        "text": analysis['warning_sign'],
                        "wrap": True,
                        "color": "#FF5551",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "üí° Âª∫Ë≠∞‰∫ãÈ†Ö",
                        "weight": "bold",
                        "color": "#1DB446",
                        "margin": "xl"
                    }
                ] + [
                    {
                        "type": "text",
                        "text": f"{i+1}. {rec}",
                        "wrap": True,
                        "size": "sm",
                        "color": "#333333",
                        "margin": "sm"
                    } for i, rec in enumerate(analysis['recommendations'])
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "‚ö†Ô∏è Ê≠§ÂàÜÊûêÂÉÖ‰æõÂèÉËÄÉÔºåÂ¶ÇÊúâÁñëÊÖÆË´ãË´ÆË©¢Â∞àÊ•≠ÈÜ´Â∏´",
                        "wrap": True,
                        "color": "#888888",
                        "size": "xs",
                        "margin": "md"
                    }
                ]
            }
        }
    }

async def send_line_reply(reply_token: str, message: dict):
    """ÁôºÈÄÅ LINE ÂõûË¶ÜË®äÊÅØ"""
    if not LINE_TOKEN:
        print("‚ùå LINE_TOKEN Êú™Ë®≠ÂÆö")
        return
    
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_TOKEN}"
    }
    
    payload = {
        "replyToken": reply_token,
        "messages": [message]
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            
        if response.status_code == 200:
            print("‚úÖ LINE ÂõûË¶ÜÁôºÈÄÅÊàêÂäü")
        else:
            print(f"‚ùå LINE ÂõûË¶ÜÂ§±Êïó: {response.status_code}, {response.text}")
            
    except Exception as e:
        print(f"‚ùå ÁôºÈÄÅÂõûË¶ÜÈåØË™§: {e}")

@app.get("/test-analysis")
def test_analysis():
    """Ê∏¨Ë©¶ÂàÜÊûêÂäüËÉΩ"""
    test_cases = [
        "Â™ΩÂ™ΩÊúÄËøëÂ∏∏ÈáçË§áÂïèÂêåÊ®£ÁöÑÂïèÈ°å",
        "Áà∏Áà∏‰∏çÊúÉÁî®ÂéüÊú¨ÁÜüÊÇâÁöÑÊ¥óË°£Ê©ü", 
        "Â•∂Â•∂Á∂ìÂ∏∏Ëø∑Ë∑ØÊâæ‰∏çÂà∞ÂõûÂÆ∂ÁöÑË∑Ø",
        "Áà∫Áà∫ÁöÑËÑæÊ∞£ËÆäÂæóÂæàÊö¥Ë∫Å"
    ]
    
    results = []
    for case in test_cases:
        analysis = analyze_dementia_symptoms(case)
        results.append({
            "input": case,
            "analysis": analysis
        })
    
    return {"test_results": results}

if __name__ == "__main__":
    print("üöÄ ÂïüÂãïÂÆåÊï¥Áâà LINE Bot Â§±Êô∫ÁóáÂàÜÊûêÊúçÂãô")
    print("‚úÖ ÂäüËÉΩ: Êé•Êî∂Ë®äÊÅØ + ÂàÜÊûê + Flex Message ÂõûË¶Ü")
    uvicorn.run(app, host="0.0.0.0", port=8000)
